[{"content":"The TLang code is written in .tlang files. They are composed of different parts that are not mandatory. The first part is the context of the file, mainly the packages that are imported or exposed. More will be said latter.\nThen in the sections of the file are described. There are three types:\nmodel, it represents the objects and the structure of your program helper, it contains the logic. Everything that will be executed is written in this section template, it defines the templates that will be used to generate the final code You don\u0026rsquo;t need to use all of them in every file. It is actually a good practice to separate correctly the different sections, especially if your project grows fast.\nThis is an example of an tlang file:\nuse myFile1 expose myFunc model { } helper { } tmpl[java] { } At that point, this program does nothing, it won\u0026rsquo;t even run but it shows the different parts.\n","description":"Language specification overview","id":0,"section":"docs","tags":null,"title":"Overview","uri":"https://tlang.dev/docs/specs/overview/"},{"content":"Make sure that you have java version 11 or above installed.\nDownload the latest version of TLang https://github.com/tlang-dev/tlang/releases\nThen run the jar:\n1 java -jar tlang.jar version Set env We advise you to set an environment variable to run the jar. in the next chapters we will use the command tlang instead of java -jar tlang.jar\nUnix On unix systems add a path to your PATH variable in your shell config file.\nWindows For Windows you need to create a batch file (for instance: C:\\Users\\YOUR_NAME\\tools\\tlang\\tlang.bat):\n1 java -jar C:\\Users\\YOUR_NAME\\tools\\tlang\\tlang.jar %* Then add the folder to your Path in your environment variables (C:\\Users\\YOUR_NAME\\tools\\tlang).\n","description":"Installing TLang","id":1,"section":"docs","tags":null,"title":"Installation","uri":"https://tlang.dev/docs/gettingstarted/installation/"},{"content":"Multi-languages\n","description":"Multi-language support","id":2,"section":"features","tags":null,"title":"Multi-languages","uri":"https://tlang.dev/features/multi-languages/"},{"content":"The template section is a bit special because it is not interpreted the same way as the other sections. As long as it is grammatically correct it\u0026rsquo;s fine, even if it doesn\u0026rsquo;t make any sense.\nA template is simply taken and transformed into another language without interpreting or attempting to make any sense if the destination language. The generated code might not compile.\nIf you create your own template you need to know the destination language to make compilable and executable code. If you reuse someone else\u0026rsquo;s template you don\u0026rsquo;t have too if the template is well documented.\nThere are four types of templates :\nLang, for programming languages such as Java, Python, Kotlin, Rust, Go, Typescript, \u0026hellip; Data, for data structure understandable by human and machine such as JSON, HTML, XML, YAML, \u0026hellip; Doc, for document such as HTML, Markdown, \u0026hellip; Cmd, for command instructions such as Bash, SQL, Batch, PowerShell, \u0026hellip; Style, for styling documents such as CSS. It is uesd as well to format generated code with TLang. ","description":"Introduction to the template concept","id":6,"section":"docs","tags":null,"title":"Template introduction","uri":"https://tlang.dev/docs/specs/template/introduction/"},{"content":"Classic \u0026ldquo;Hello, World\u0026rdquo; Main.tlang:\nuse io.Terminal helper { func main() { Terminal.println(\u0026#34;Hello, World !\u0026#34;) } } manifest.yaml\n1 2 3 4 5 6 7 8 name: HelloWorld project: IntegrationTests organisation: TLang version: 1.0.0 stability: alpha releaseNumber: 1 dependencies: - TLang/IO/Terminal 1.0.0:alpha:1 io Generate \u0026ldquo;Hello, World\u0026rdquo; in Scala Main.tlang:\nuse io.Terminal use gen.Generator helper { func main() { Terminal.println(Generator.generate(helloWorld())) } } tmpl[scala] helloWorld { pkg hello_world impl HelloWorld { func main(args: String[]) { println(\u0026#34;Hello, World!\u0026#34;) } } } manifest.yaml\n1 2 3 4 5 6 7 8 9 name: HelloWorldInScala project: IntegrationTests organisation: TLang version: 1.0.0 stability: alpha releaseNumber: 1 dependencies: - TLang/IO/Terminal 1.0.0:alpha:1 io - TLang/Generator/Generator 1.0.0:alpha:1 gen To run this example, in your favourite terminal, go to the folder where you saved these files and then run:\n1 tlang run . ","description":"Running the \"Hello world!\" programm with TLang","id":7,"section":"docs","tags":null,"title":"Hello world !","uri":"https://tlang.dev/docs/gettingstarted/helloworld/"},{"content":"Simple to learn\n","description":"TLang is simple to learn","id":8,"section":"features","tags":null,"title":"Simple to learn","uri":"https://tlang.dev/features/simple/"},{"content":"Many templates\n","description":"Many templates available to use","id":9,"section":"features","tags":null,"title":"Many templates","uri":"https://tlang.dev/features/many-templates/"},{"content":"IDE support\n","description":"TLang is supported by IDE","id":10,"section":"features","tags":null,"title":"IDE support","uri":"https://tlang.dev/features/ide-support/"}]