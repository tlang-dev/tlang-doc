[{"content":"By default TLang is immutable, the following tools allow mutability:\nmutable map mutable list mutable variable ","description":"Mutable package","id":0,"section":"docs","tags":null,"title":"Mutable","uri":"https://tlang.dev/docs/libraries/internal/std/mutable/"},{"content":"The TLang code is written in .tlang files. They are composed of different parts that are not mandatory. The first part is the context of the file, mainly the packages that are imported or exposed. More will be said latter.\nThen in the sections of the file are described. There are three types:\nmodel, it represents the objects and the structure of your program helper, it contains the logic. Everything that will be executed is written in this section template, it defines the templates that will be used to generate the final code You don\u0026rsquo;t need to use all of them in every file. It is actually a good practice to separate correctly the different sections, especially if your project grows fast.\nThis is an example of an tlang file:\nuse myFile1 expose myFunc model { } helper { } lang[java] myTemplate() { } At that point, this program does nothing, it won\u0026rsquo;t even run but it shows the different parts.\n","description":"Language specification overview","id":2,"section":"docs","tags":null,"title":"Overview","uri":"https://tlang.dev/docs/specs/overview/"},{"content":"Make sure that you have java version 11 or above installed.\nDownload the latest version of TLang https://github.com/tlang-dev/tlang/releases\nThen run the jar:\n1 java -jar tlang.jar version Set env We advise you to set an environment variable to run the jar. in the next chapters we will use the command tlang instead of java -jar tlang.jar\nUnix On unix systems add a path to your PATH variable in your shell config file.\nWindows For Windows you need to create a batch file (for instance: C:\\Users\\YOUR_NAME\\tools\\tlang\\tlang.bat):\n1 java -jar C:\\Users\\YOUR_NAME\\tools\\tlang\\tlang.jar %* Then add the folder to your Path in your environment variables (C:\\Users\\YOUR_NAME\\tools\\tlang).\n","description":"Installing TLang","id":3,"section":"docs","tags":null,"title":"Installation","uri":"https://tlang.dev/docs/gettingstarted/installation/"},{"content":"Multi-languages\n","description":"Multi-language support","id":4,"section":"features","tags":null,"title":"Multi-languages","uri":"https://tlang.dev/features/multi-languages/"},{"content":"Interact with the file system to manage files\n","description":"File system library","id":5,"section":"docs","tags":null,"title":"File","uri":"https://tlang.dev/docs/libraries/internal/io/file/"},{"content":"Interact with the terminal to read or print data.\n","description":"Terminal library","id":7,"section":"docs","tags":null,"title":"Terminal","uri":"https://tlang.dev/docs/libraries/internal/io/terminal/"},{"content":"The template section is a bit special because it is not interpreted the same way as the other sections. As long as it is grammatically correct it\u0026rsquo;s fine, even if it doesn\u0026rsquo;t make any sense.\nA template is simply taken and transformed into another language without interpreting or attempting to make any sense if the destination language. The generated code might not compile.\nIf you create your own template you need to know the destination language to make compilable and executable code. If you reuse someone else\u0026rsquo;s template you don\u0026rsquo;t have too if the template is well documented.\nThere are four types of templates :\nLang, for programming languages such as Java, Python, Kotlin, Rust, Go, Typescript, \u0026hellip; Data, for data structure understandable by human and machine such as JSON, HTML, XML, YAML, \u0026hellip; Doc, for document such as HTML, Markdown, \u0026hellip; Cmd, for command instructions such as Bash, SQL, Batch, PowerShell, \u0026hellip; Style, for styling documents such as CSS. It is uesd as well to format generated code with TLang. ","description":"Introduction to the template concept","id":8,"section":"docs","tags":null,"title":"Template introduction","uri":"https://tlang.dev/docs/specs/template/introduction/"},{"content":"String builder to easily concatenate strings.\nadd Add string content to the builder\ntoString Get the the repesentation of the StrBuilder as string\nln Add a new line\nlrn Add a new line with return\n","description":"StrBuilder package","id":10,"section":"docs","tags":null,"title":"StrBuilder","uri":"https://tlang.dev/docs/libraries/internal/std/strbuilder/"},{"content":"Classic \u0026ldquo;Hello, World\u0026rdquo; Main.tlang:\nuse io.Terminal helper { func main() { Terminal.println(\u0026#34;Hello, World !\u0026#34;) } } manifest.yaml\n1 2 3 4 5 6 7 8 name: HelloWorld project: IntegrationTests organisation: TLang version: 1.0.0 stability: alpha releaseNumber: 1 dependencies: - TLang/IO/Terminal 1.0.0:alpha:1 io Generate \u0026ldquo;Hello, World\u0026rdquo; in Scala Main.tlang:\nuse io.Terminal use gen.Generator helper { func main() { Terminal.println(Generator.generate(helloWorld())) } } lang[scala] helloWorld() { pkg hello_world impl HelloWorld { func main(args: String[]) { println(\u0026#34;Hello, World!\u0026#34;) } } } manifest.yaml\n1 2 3 4 5 6 7 8 9 name: HelloWorldInScala project: IntegrationTests organisation: TLang version: 1.0.0 stability: alpha releaseNumber: 1 dependencies: - TLang/IO/Terminal 1.0.0:alpha:1 io - TLang/Generator/Generator 1.0.0:alpha:1 gen To run this example, in your favourite terminal, go to the folder where you saved these files and then run:\n1 tlang run . ","description":"Running the \"Hello world!\" programm with TLang","id":11,"section":"docs","tags":null,"title":"Hello world !","uri":"https://tlang.dev/docs/gettingstarted/helloworld/"},{"content":"Simple to learn\n","description":"TLang is simple to learn","id":12,"section":"features","tags":null,"title":"Simple to learn","uri":"https://tlang.dev/features/simple/"},{"content":"The http library includes an http client and a simple http server.\n","description":"Http client and server","id":13,"section":"docs","tags":null,"title":"Http","uri":"https://tlang.dev/docs/libraries/internal/io/http/"},{"content":"Simple SSH Client.\n","description":"SSH client","id":14,"section":"docs","tags":null,"title":"SSH","uri":"https://tlang.dev/docs/libraries/internal/io/ssh/"},{"content":"Usefull functions to modify and manage chains of chars.\n","description":"String package","id":15,"section":"docs","tags":null,"title":"String","uri":"https://tlang.dev/docs/libraries/internal/std/string/"},{"content":"Many templates\n","description":"Many templates available to use","id":16,"section":"features","tags":null,"title":"Many templates","uri":"https://tlang.dev/features/many-templates/"},{"content":"IDE support\n","description":"TLang is supported by IDE","id":17,"section":"features","tags":null,"title":"IDE support","uri":"https://tlang.dev/features/ide-support/"},{"content":"TLang is a small programming language that can help generate code in many programming languages such as Java, Kotlin, TypeScript, and Dart by creating code templates. It is useful to avoid boilerplate code, refactor and improve code, maintain code consistency, save time, and correct bugs.\nIn this blog post, I will share how we used TLang to create our own opinionated component that serves as a meta framework for our business. This meta framework allows us to focus on the business logic and requirements, rather than the technical details and implementation. It also enables us to generate the documentation, the specifications, the mockups, and the code for our projects automatically. This means that one team works on creating new components with TLang, and the other teams work on their applications using the components.\nWhat is a meta framework? A meta framework is a framework that can generate other frameworks. It is a way of abstracting the common patterns and functionalities that are needed for different types of applications, and providing a high-level interface to customize and configure them.\nFor example, a meta framework for web development could generate a web framework that handles routing, authentication, database access, templating, testing, etc. based on the specifications and preferences of the developer. The developer would only need to write the business logic and the user interface for their web application, and the meta framework would take care of the rest.\nA meta framework can also generate other artifacts that are related to the application, such as documentation, specifications, mockups, and code. This can help streamline the development process, ensure consistency and quality, and reduce errors and bugs.\nHow we created our meta framework with TLang We decided to use TLang as the language for creating our meta framework, because it has several advantages:\nIt is simple and expressive, with a syntax that is easy to read and write. It supports multiple programming languages, so we can generate code for different platforms and environments. It has a powerful template system, that allows us to define reusable code snippets and insert them into different places. It has a flexible type system, that allows us to define custom types and validations for our data and components. It has a rich set of built-in functions and libraries, that cover common tasks and scenarios. We started by defining the core components of our meta framework, such as:\nA component model, that defines the structure, behavior, and interface of each component. A component registry, that stores and manages the components and their dependencies. A component generator, that takes the specifications and preferences of the developer and generates the code and other artifacts for the component. A component tester, that validates and verifies the component and its functionality. A component documentation, that generates the documentation and the mockups for the component. We then used TLang to write the code templates for each component, based on the best practices and standards of the target programming language. We also wrote the code templates for the documentation and the mockups, using Markdown and HTML respectively.\nWe also defined some custom types and functions for our business domain, such as:\nA customer type, that represents the information and preferences of a customer. A product type, that represents the information and features of a product. A order type, that represents the information and status of an order. A payment type, that represents the information and method of a payment. A discount function, that calculates the discount amount for a given order. A tax function, that calculates the tax amount for a given order. A shipping function, that calculates the shipping cost and time for a given order. We then registered these types and functions in the component registry, so that they can be used by other components.\nHow we used our meta framework for our projects Once we had our meta framework ready, we were able to use it for our projects. For each project, we followed these steps:\nWe defined the specifications and preferences for the project, such as the name, the description, the target programming language, the target platform, the target audience, the features, the requirements, the design, etc. We used the component generator to generate the code and other artifacts for the project, based on the specifications and preferences. The component generator would use the code templates and the component registry to create the components and their dependencies, and insert them into the appropriate places. We used the component tester to test the project and its components, and check for any errors or bugs. The component tester would use the custom types and functions to validate and verify the data and the functionality of the components. We used the component documentation to generate the documentation and the mockups for the project, and review them for any feedback or improvement. The component documentation would use the code templates and the component registry to create the documentation and the mockups, and display them in a user-friendly format. By using our meta framework, we were able to create our projects faster, easier, and better. We were able to focus on the business logic and requirements, rather than the technical details and implementation. We were able to generate the documentation, the specifications, the mockups, and the code for our projects automatically, and ensure their consistency and quality. We were able to reduce the errors and bugs, and improve the performance and reliability of our projects.\nConclusion TLang is a small programming language that can help generate code in many programming languages by creating code templates. We used TLang to create our own opinionated component that serves as a meta framework for our business. This meta framework allows us to focus on the business logic and requirements, and generate the documentation, the specifications, the mockups, and the code for our projects automatically. This means that one team works on creating new components with TLang, and the other teams work on their applications using the components.\nIf you are interested in learning more about TLang and our meta framework, you can visit our website or contact us. We would love to hear from you and answer any questions you may have. Thank you for reading this blog post, and we hope you found it useful and informative. 😊\n","description":"","id":19,"section":"blog","tags":["Metaframework","Business","Software architecture"],"title":"Meta framwork with TLang","uri":"https://tlang.dev/blog/meta-framework-with-tlang/"},{"content":"Introduction: In the ever-evolving world of programming, efficiency and innovation are key. As developers, we are constantly seeking tools that can streamline our work, improve code quality, and foster creativity. Two such tools that have emerged as game-changers are TLang and generative AI.\nWhat is TLang? TLang is a small programming language designed to generate code in various languages such as Java, Kotlin, TypeScript, and Dart. It allows developers to create code templates, which can be incredibly useful for a number of reasons.\nBenefits of TLang: TLang is particularly effective in eliminating boilerplate code. Boilerplate code refers to sections of code that have to be included in many places with little or no alteration. It\u0026rsquo;s often considered a necessary evil by developers. However, with TLang, this is no longer the case.\nBy creating code templates, TLang allows for easy refactoring and improvement of code. It ensures code consistency, which is crucial for maintaining a clean and understandable codebase. Moreover, it saves time, allowing developers to focus on more complex tasks. Lastly, TLang aids in bug correction, as the standardized code reduces the chances of errors.\nWhat is Generative AI? Generative AI, on the other hand, is a form of artificial intelligence that leverages machine learning techniques to generate data similar to the one it\u0026rsquo;s trained on. In the context of programming, generative AI can create unique and creative functions.\nBenefits of Generative AI: Generative AI shines when it comes to creating unique and creative functions. It can generate code that a human might not think of, leading to innovative solutions. It\u0026rsquo;s also capable of learning from past data, improving its code generation over time.\nThe Complementary Nature of TLang and Generative AI: While both TLang and generative AI have their individual strengths, they complement each other beautifully in the realm of coding. TLang can handle the repetitive, boilerplate code, ensuring consistency and saving time. Meanwhile, generative AI can take on the task of creating unique functions, bringing creativity and innovation to the table.\nIn conclusion, the combination of TLang and generative AI can revolutionize the way we code. By letting TLang handle the boilerplate code and generative AI deal with the creative aspects, we can achieve a balance that leads to efficient, high-quality, and innovative coding.\n","description":"","id":20,"section":"blog","tags":["Generative AI","Boilerplate code","Templates"],"title":"TLang versus generatibe AI","uri":"https://tlang.dev/blog/tlang-versus-generative-ai/"}]