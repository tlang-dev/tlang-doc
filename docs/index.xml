<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TLang</title>
    <link>https://tlang.dev/</link>
    <description>Recent content on TLang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 26 Jan 2020 04:15:05 +0900</lastBuildDate>
    
        <atom:link href="https://tlang.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>Mutable</title>
        <link>https://tlang.dev/docs/libraries/internal/std/mutable/</link>
        <pubDate>Thu, 11 Jan 2024 14:09:21 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/libraries/internal/std/mutable/</guid>
        <description>By default TLang is immutable, the following tools allow mutability:
mutable map mutable list mutable variable </description>
      </item>
      
      <item>
        <title>Overview</title>
        <link>https://tlang.dev/docs/libraries/overview/</link>
        <pubDate>Thu, 11 Jan 2024 14:09:21 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/libraries/overview/</guid>
        <description></description>
      </item>
      
      <item>
        <title>Overview</title>
        <link>https://tlang.dev/docs/specs/overview/</link>
        <pubDate>Tue, 28 Jan 2020 00:36:39 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/specs/overview/</guid>
        <description>The TLang code is written in .tlang files. They are composed of different parts that are not mandatory. The first part is the context of the file, mainly the packages that are imported or exposed. More will be said latter.
Then in the sections of the file are described. There are three types:
model, it represents the objects and the structure of your program helper, it contains the logic. Everything that will be executed is written in this section template, it defines the templates that will be used to generate the final code You don&amp;rsquo;t need to use all of them in every file.</description>
      </item>
      
      <item>
        <title>Installation</title>
        <link>https://tlang.dev/docs/gettingstarted/installation/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:13 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/gettingstarted/installation/</guid>
        <description>Make sure that you have java version 11 or above installed.
Download the latest version of TLang https://github.com/tlang-dev/tlang/releases
Then run the jar:
1 java -jar tlang.jar version Set env We advise you to set an environment variable to run the jar. in the next chapters we will use the command tlang instead of java -jar tlang.jar
Unix On unix systems add a path to your PATH variable in your shell config file.</description>
      </item>
      
      <item>
        <title>Multi-languages</title>
        <link>https://tlang.dev/features/multi-languages/</link>
        <pubDate>Tue, 28 Jan 2020 00:08:29 +0900</pubDate>
        
        <guid>https://tlang.dev/features/multi-languages/</guid>
        <description>Multi-languages</description>
      </item>
      
      <item>
        <title>File</title>
        <link>https://tlang.dev/docs/libraries/internal/io/file/</link>
        <pubDate>Sat, 11 Jan 2020 14:09:21 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/libraries/internal/io/file/</guid>
        <description>Interact with the file system to manage files</description>
      </item>
      
      <item>
        <title>Generator</title>
        <link>https://tlang.dev/docs/libraries/internal/generator/generator/</link>
        <pubDate>Sat, 11 Jan 2020 14:09:21 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/libraries/internal/generator/generator/</guid>
        <description></description>
      </item>
      
      <item>
        <title>Terminal</title>
        <link>https://tlang.dev/docs/libraries/internal/io/terminal/</link>
        <pubDate>Sat, 11 Jan 2020 14:09:21 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/libraries/internal/io/terminal/</guid>
        <description>Interact with the terminal to read or print data.</description>
      </item>
      
      <item>
        <title>Template introduction</title>
        <link>https://tlang.dev/docs/specs/template/introduction/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://tlang.dev/docs/specs/template/introduction/</guid>
        <description>The template section is a bit special because it is not interpreted the same way as the other sections. As long as it is grammatically correct it&amp;rsquo;s fine, even if it doesn&amp;rsquo;t make any sense.
A template is simply taken and transformed into another language without interpreting or attempting to make any sense if the destination language. The generated code might not compile.
If you create your own template you need to know the destination language to make compilable and executable code.</description>
      </item>
      
      <item>
        <title>Manifest</title>
        <link>https://tlang.dev/docs/architecture/manifest/</link>
        <pubDate>Thu, 11 Jan 2024 14:09:21 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/architecture/manifest/</guid>
        <description></description>
      </item>
      
      <item>
        <title>StrBuilder</title>
        <link>https://tlang.dev/docs/libraries/internal/std/strbuilder/</link>
        <pubDate>Thu, 11 Jan 2024 14:09:21 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/libraries/internal/std/strbuilder/</guid>
        <description>String builder to easily concatenate strings.
add Add string content to the builder
toString Get the the repesentation of the StrBuilder as string
ln Add a new line
lrn Add a new line with return</description>
      </item>
      
      <item>
        <title>Hello world !</title>
        <link>https://tlang.dev/docs/gettingstarted/helloworld/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:41 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/gettingstarted/helloworld/</guid>
        <description>Classic &amp;ldquo;Hello, World&amp;rdquo; Main.tlang:
use io.Terminal helper { func main() { Terminal.println(&amp;#34;Hello, World !&amp;#34;) } } manifest.yaml
1 2 3 4 5 6 7 8 name: HelloWorld project: IntegrationTests organisation: TLang version: 1.0.0 stability: alpha releaseNumber: 1 dependencies: - TLang/IO/Terminal 1.0.0:alpha:1 io Generate &amp;ldquo;Hello, World&amp;rdquo; in Scala Main.tlang:
use io.Terminal use gen.Generator helper { func main() { Terminal.println(Generator.generate(helloWorld())) } } tmpl[scala] helloWorld { pkg hello_world impl HelloWorld { func main(args: String[]) { println(&amp;#34;Hello, World!</description>
      </item>
      
      <item>
        <title>Simple to learn</title>
        <link>https://tlang.dev/features/simple/</link>
        <pubDate>Tue, 28 Jan 2020 00:08:29 +0900</pubDate>
        
        <guid>https://tlang.dev/features/simple/</guid>
        <description>Simple to learn</description>
      </item>
      
      <item>
        <title>Http</title>
        <link>https://tlang.dev/docs/libraries/internal/io/http/</link>
        <pubDate>Thu, 11 Jan 2024 14:09:21 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/libraries/internal/io/http/</guid>
        <description>The http library includes an http client and a simple http server.</description>
      </item>
      
      <item>
        <title>SSH</title>
        <link>https://tlang.dev/docs/libraries/internal/io/ssh/</link>
        <pubDate>Thu, 11 Jan 2024 14:09:21 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/libraries/internal/io/ssh/</guid>
        <description>Simple SSH Client.</description>
      </item>
      
      <item>
        <title>String</title>
        <link>https://tlang.dev/docs/libraries/internal/std/string/</link>
        <pubDate>Thu, 11 Jan 2024 14:09:21 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/libraries/internal/std/string/</guid>
        <description>Usefull functions to modify and manage chains of chars.</description>
      </item>
      
      <item>
        <title>Many templates</title>
        <link>https://tlang.dev/features/many-templates/</link>
        <pubDate>Tue, 28 Jan 2020 00:08:29 +0900</pubDate>
        
        <guid>https://tlang.dev/features/many-templates/</guid>
        <description>Many templates</description>
      </item>
      
      <item>
        <title>IDE support</title>
        <link>https://tlang.dev/features/ide-support/</link>
        <pubDate>Tue, 28 Jan 2020 00:08:29 +0900</pubDate>
        
        <guid>https://tlang.dev/features/ide-support/</guid>
        <description>IDE support</description>
      </item>
      
      <item>
        <title>Market</title>
        <link>https://tlang.dev/docs/libraries/market/</link>
        <pubDate>Sat, 11 Jan 2020 14:09:21 +0900</pubDate>
        
        <guid>https://tlang.dev/docs/libraries/market/</guid>
        <description></description>
      </item>
      
    
  </channel>
</rss>